<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vernonn</title>
  <icon>https://www.gravatar.com/avatar/d80a6d5c8a98ec2ffae74ae3387e0033</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="vernonn.com/"/>
  <updated>2018-05-06T03:46:37.470Z</updated>
  <id>vernonn.com/</id>
  
  <author>
    <name>Vernonn</name>
    <email>695035427@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css伪类小技巧:hover</title>
    <link href="vernonn.com/2018/05/03/css%E4%BC%AA%E7%B1%BB%E5%B0%8F%E6%8A%80%E5%B7%A7-hover/"/>
    <id>vernonn.com/2018/05/03/css伪类小技巧-hover/</id>
    <published>2018-05-03T01:31:35.000Z</published>
    <updated>2018-05-06T03:46:37.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h3><p>面试的时候遇到的机试题，左侧侧边栏有若干个条目，鼠标移入(onmouseover)的时候紧贴着侧边栏弹出相应的详细信息框。</p><p>可以直接用原生JS实现，但也可以用css伪类直接且简单的实现。</p><p><strong>这里使用伪类选择器:hover</strong></p><a id="more"></a><h3 id="父子元素（直接-非直接）"><a href="#父子元素（直接-非直接）" class="headerlink" title="父子元素（直接/非直接）"></a>父子元素（直接/非直接）</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>父子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body</span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.container</span> <span class="token class">.ul</span> li</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.container</span><span class="token pseudo-class">:hover</span> ul<span class="token class">.ul</span>>li<span class="token pseudo-class">:nth-child(2)</span></span><span class="token punctuation">{</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    鼠标移入方框中任意位置使第二行元素改变样式        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>示例代码中，<code>.container</code>与<code>.ul</code>及其子元素<code>li</code>均为父子关系，故在父元素<code>:hover</code>后加<code>空格</code>(本示例中<code>.container</code>与<code>.ul</code>为直接父子关系，也可把<code>空格</code>换为<code>&gt;</code>)，接上需要切换样式的子元素选择器即可。</p></blockquote><h3 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>兄弟元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body</span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.container</span> <span class="token class">.ul</span> li</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.container</span><span class="token pseudo-class">:hover</span> ul<span class="token class">.ul</span>>li<span class="token pseudo-class">:nth-child(2)</span></span><span class="token punctuation">{</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.brother</span> </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> -webkit-fit-content<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> -moz-fit-content<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span>  <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.brother</span><span class="token pseudo-class">:hover</span>+<span class="token class">.container</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brother<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        鼠标移到我这里让.container元素消失    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>示例代码中，<code>.brother</code>与<code>.container</code>为兄弟关系，故在前一个兄弟元素<code>:hover</code>后加<code>+</code>(:hover伪类需加在前一个兄弟元素上)，接上需要切换样式的兄弟元素即可。</p></blockquote><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>可以用<code>:after</code> 或 <code>:before</code>来达到效果，<strong>但是</strong>有小bug（如果是切换<code>display:none;</code>样式的时候，鼠标移动到<code>:after</code> 或 <code>:before</code>上时会出现闪烁），暂时没找到解决的办法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;契机&quot;&gt;&lt;a href=&quot;#契机&quot; class=&quot;headerlink&quot; title=&quot;契机&quot;&gt;&lt;/a&gt;契机&lt;/h3&gt;&lt;p&gt;面试的时候遇到的机试题，左侧侧边栏有若干个条目，鼠标移入(onmouseover)的时候紧贴着侧边栏弹出相应的详细信息框。&lt;/p&gt;
&lt;p&gt;可以直接用原生JS实现，但也可以用css伪类直接且简单的实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里使用伪类选择器:hover&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="vernonn.com/categories/CSS/"/>
    
    
      <category term="伪类" scheme="vernonn.com/tags/%E4%BC%AA%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用方法</title>
    <link href="vernonn.com/2017/12/02/JavaScript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>vernonn.com/2017/12/02/JavaScript常用方法/</id>
    <published>2017-12-02T14:14:18.000Z</published>
    <updated>2018-05-06T03:55:45.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript常用方法"><a href="#JavaScript常用方法" class="headerlink" title="JavaScript常用方法"></a>JavaScript常用方法</h3><a id="more"></a><ul><li>仿ECMAScript5中Object.create()函数</li><li>仿ECMAScript5中String.trim()函数</li><li>仿ECMAScript5中Array.reduce()函数</li><li>仿ECMAScript5中Object.keys()函数</li><li>仿ECMAScript5中Function.bind()函数</li><li>仿ECMAScript5中Array.map()函数</li><li>仿Math.max()方法实现</li><li>仿String.match()方法实现</li><li>仿HTML5的classList属性实现</li><li>仿Function.name属性实现</li><li>返回元素的第n层祖先元素</li><li>返回元素的第n个兄弟元素</li><li>返回元素的第n个子代元素</li><li>原生JS实现CSS动画之震动</li><li>原生JS实现CSS动画之隐藏</li><li>在数组中查找所有出现的元素方法</li><li>数据类型检测之特殊情况特殊处理</li><li>使用innerHTML实现outerHTML属性</li><li>插入节点</li><li>倒序排列子节点</li><li>查询窗口滚动条的位置</li><li>查询窗口的视口尺寸</li><li>表格的行排序</li><li>生成目录表</li><li>数组去重</li><li>冒泡排序</li><li>从URL解析参数</li><li>获取纯文本的元素内容</li><li>手写一个JSONP实现</li><li>查询纯文本形式的内容</li><li>查找元素的后代中节点中的所有Text节点</li><li>使用innerHTML实现insertAdjacentHTML</li><li>拖拽</li></ul><hr><h4 id="仿ECMAScript5中Object-create-函数"><a href="#仿ECMAScript5中Object-create-函数" class="headerlink" title="仿ECMAScript5中Object.create()函数"></a>仿ECMAScript5中Object.create()函数</h4><pre><code>function inherit(obj) {    if (obj === null) throw TypeError();    if (Object.create) return Object.create(obj);    var t = typeof obj;    if (t !== &quot;object&quot; &amp;&amp; t !== &quot;function&quot;) throw TypeError();    function Fn() {};    Fn.prototype = obj;    return new Fn();}</code></pre><h4 id="仿ECMAScript5中String-trim-函数"><a href="#仿ECMAScript5中String-trim-函数" class="headerlink" title="仿ECMAScript5中String.trim()函数"></a>仿ECMAScript5中String.trim()函数</h4><pre><code>String.prototype.mytrim = function () {    String.prototype.trim || function () {        if (!this) return this; //空字符串不做处理        return this.replace(/^\s+|\s+$/g, &quot;&quot;) //使用正则表达式经行空格替换    }}</code></pre><h4 id="仿ECMAScript5中Array-reduce-函数"><a href="#仿ECMAScript5中Array-reduce-函数" class="headerlink" title="仿ECMAScript5中Array.reduce()函数"></a>仿ECMAScript5中Array.reduce()函数</h4><pre><code>var reduce = Array.prototype.reduce ? function (ary, fn, initial) {    if (arguments.length &gt; 2) { //如果reduce()方法存在的话        return ary.reduce(fn, initial); //如果传入了一个初始值    } else {        return ary.reduce(fn); //否则初始值    }} : function (ary, fn, initial) { //以特定的初始值开始，否则第一个值取自ary    var i = 0,        len = ary.length,        accumulator;    if (arguments.length &gt; 2) {        accumulator = initial;    } else { //找到数组中第一个已经定义的索引        if (len == 0) throw TypeError();        while (i &lt; len) {            if (i in ary) {                accumulator = ary[i++];                break;            } else {                i++;            }        }        if (i == len) throw TypeError();    }    while (i &lt; len) { //对于数组中剩下的元素依次调用fn        if (i in ary) {            accumulator = fn.call(undefined, accumulator, ary[i], i, ary)        }        i++;    }    return accumulator;}</code></pre><h4 id="在数组中查找所有出现的元素方法"><a href="#在数组中查找所有出现的元素方法" class="headerlink" title="在数组中查找所有出现的元素方法"></a>在数组中查找所有出现的元素方法</h4><pre><code>function findAll(ary, ele) {    var results = [],        len = a.length,        pos = 0;    while (pos &lt; len) {        pos = ary.indexOf(ele, pos);        if (pos === -1) break;        results.push(pos);        pos++;    }    return results;}</code></pre><h4 id="数据类型检测，特殊情况特殊处理"><a href="#数据类型检测，特殊情况特殊处理" class="headerlink" title="数据类型检测，特殊情况特殊处理"></a>数据类型检测，特殊情况特殊处理</h4><pre><code>function classOf(obj) {    if (obj === null) return &quot;Null&quot;;    if (obj === undefined) return &#39;Undefined&#39;;    return Object.prototype.toString.call(obj).slice(8, -1);}</code></pre><h4 id="仿ECMAScript5中Object-keys-函数"><a href="#仿ECMAScript5中Object-keys-函数" class="headerlink" title="仿ECMAScript5中Object.keys()函数"></a>仿ECMAScript5中Object.keys()函数</h4><pre><code>function keys(obj) {    if (typeof obj !== &quot;object&quot;) {        throw TypeError();    }    var result = [];    for (var prop in obj) {        if (obj.hasOwnProperty(prop)) {            result.push(prop);        }    }    return result;}</code></pre><h4 id="仿Math-max方法（不定实参函数）"><a href="#仿Math-max方法（不定实参函数）" class="headerlink" title="仿Math.max方法（不定实参函数）"></a>仿Math.max方法（不定实参函数）</h4><pre><code>function max() {    var max = Number.NEGATIVE_INFINITY;    for (var i = 0; i &lt; arguments.length; i++) {        if (arguments[i] &gt; max) max = arguments[i];    }    return max;}</code></pre><h4 id="仿ECMAScript5中Function-bind-函数"><a href="#仿ECMAScript5中Function-bind-函数" class="headerlink" title="仿ECMAScript5中Function.bind()函数"></a>仿ECMAScript5中Function.bind()函数</h4><pre><code>if (!Function.prototype.bind) {    Function.prototype.bind = function (obj) {        var self = this,            boundArgs = arguments;        return function () {            var args = [],                i;            for (i = 1; i &lt; boundArgs.length; i++) args.push(boundArgs[i]);            for (i = 1; i &lt; arguments.length; i++) args.push(arguments[i]);            return self.apply(obj, args);        }    }}</code></pre><h4 id="仿ECMAScript5中Array-map-函数"><a href="#仿ECMAScript5中Array-map-函数" class="headerlink" title="仿ECMAScript5中Array.map()函数"></a>仿ECMAScript5中Array.map()函数</h4><pre><code>var map = Array.prototype.map ? function (ary, fn) {    return ary.map(fn);} : function (ary, fn) {    var results = [];    for (var i = 0, len = ary.length; i &lt; len; i++) {        if (i in ary) {            results[i] = fn.call(null, ary[i], i, ary);        }    }    return results;}</code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><pre><code>Array.prototype.unique = function unique() {    var obj = {};    for (var i = 0; i &lt; this.length; i++) {        var current = this[i];        if (obj[current] === current) {            current = this[this.length - 1];            this.length--;            i--;            continue;        }        obj[current] = current    }    obj = null;    return this;}</code></pre><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre><code>Array.prototype.bubbleSort = function bubbleSort() {    var temp = null;    for (var i = 0; i &lt; this.length - 1; i++) {        for (var k = 0; k &lt; this.length - 1 - i; k++) {            if (this[k] &gt; this[k + 1]) {                temp = this[k];                this[k] = this[k + 1];                this[k + 1] = temp;            }        }    }    return this;}</code></pre><h4 id="仿String-match-方法实现"><a href="#仿String-match-方法实现" class="headerlink" title="仿String.match()方法实现"></a>仿String.match()方法实现</h4><pre><code>String.prototype.mymatch = function (reg) { var ary = []; var res = reg.exec(this); while (res) {    ary.push(res[0]);    res = reg.exec(this); } return ary;}</code></pre><h4 id="返回元素的第n层祖先元素"><a href="#返回元素的第n层祖先元素" class="headerlink" title="返回元素的第n层祖先元素"></a>返回元素的第n层祖先元素</h4><pre><code>/***返回元素ele的第n层祖先元素，如果不存在此类祖先或祖先不是Element，*（例如Document或者DocumentFragment）则返回null*如果n为0，则返回e本身。如果n为1（或省略），则返回其父元素*如果n为2，则返回其祖父元素，依次类推*/function parent(ele, n) {    if (n === nudefined) n = 1;    while (n-- &amp;&amp; ele) {        ele = ele.parentNode;    }    if (!ele || ele.nodeTope !== 1) return null;    return ele;}</code></pre><h4 id="返回元素的第n个兄弟元素"><a href="#返回元素的第n个兄弟元素" class="headerlink" title="返回元素的第n个兄弟元素"></a>返回元素的第n个兄弟元素</h4><pre><code>/** *返回元素ele的第n个兄弟元素 *如果n为正，返回后续的第n个兄弟元素 *如果n为负，返回前面的第n个兄弟元素 *如果n为零，返回ele本身 */function sibling(ele, n) {    while (ele &amp;&amp; n !== 0) { //如果ele未定义，即刻返回它        if (n &gt; 0) { //查找后续的兄弟元素            if (ele.nextElementSibling) {                ele = ele.nextElementSibling;            } else {                for (ele = ele.nextSibling; ele &amp;&amp; ele.nodeType !== 1; ele = ele.nextSibling) /*空循环*/;            }            n--;        } else { //查找前面的兄弟元素            if (ele.previousElementSibing) {                ele = ele.previousElementSibling;            } else {                for (ele = ele.previousSibling; ele &amp;&amp; ele.nodeType !== 1; ele = ele.previousSibling) /*空循环*/;            }            n++;        }    }    return ele;}</code></pre><h4 id="返回元素的第n个子代元素"><a href="#返回元素的第n个子代元素" class="headerlink" title="返回元素的第n个子代元素"></a>返回元素的第n个子代元素</h4><pre><code>/** *返回元素ele的第n代子元素，如果不存在则为null *负值n代表从后往前计数。0表示第一个子元素，而-1代表最后一个，-2代表倒数第二个，依次类推 */function child(ele, n) {    if (ele.children) { //如果children数组存在        if (n &lt; 0) n += ele.children.length; //转换负的n为数组索引        if (n &lt; 0) return null; //如果它仍然为负，说明没有子元素        return ele.children[n]; //返回指定的子元素    }    //如果e没有children数组，找到第一个子元素并向前数，或找到最后一个子元素并往回数    if (n &gt;= 0) { //n非负：从第一个子元素向前数        //找到元素e的第一个子元素        if (ele.firstElementChild) {            ele = ele.firstElementChild;        } else {            for (ele = ele.firstChild; ele &amp;&amp; ele.nodeType !== 1; ele = ele.nextSibling) /*空循环*/;        }        return sibling(ele, n); //返回第一个子元素的第n个兄弟元素    } else { //n为负：从最后一个子元素往回数        if (ele.lastElementChild) {            ele = ele.lastElementChild;        } else {            for (ele = ele.lastChild; ele &amp;&amp; ele.nodeType !== 1; ele = ele.previousSibling) /*空循环*/;        }        return sibling(ele, n + 1); //+1来转化最后1个子元素为最后1个兄弟元素    }}</code></pre><h4 id="表格的行排序"><a href="#表格的行排序" class="headerlink" title="表格的行排序"></a>表格的行排序</h4><pre><code>//根据指定表格每行第n个单元格的值，对第一个＜tbody＞中的行进行排序//如果存在comparator函数则使用它，否则按字母表顺序比较function sortrows(table, n, comparator) {    var tbody = table.tBodies[0]; //第一个＜tbody＞，可能是隐式创建的    var rows = tbody.getElementsByTagName(&quot;tr&quot;); //tbody中的所有行    rows = Array.prototype.slice.call(rows, 0); //真实数组中的快照    //基于第n个＜td＞元素的值对行排序    rows.sort(function (row1, row2) {        var cell1 = row1.getElementsByTagName(&quot;td&quot;)[n]; //获得第n个单元格        var cell2 = row2.getElementsByTagName(&quot;td&quot;)[n]; //两行都是        var val1 = cell1.textContent || cell1.innerText; //获得文本内容        var val2 = cell2.textContent || cell2.innerText; //两单元格都是        if (comparator) return comparator(val1, val2); //进行比较        if (val1 &lt; val2) {            return -1;        } else if (val1 &gt; val2) {            return 1;        } else {            return 0;        }    }); //在tbody中按它们的顺序把行添加到最后    //这将自动把它们从当前位置移走，故没必要预先删除它们    //如果＜tbody＞还包含了除了＜tr＞的任何其他元素，这些节点将会悬浮到顶部位置    for (var i = 0; i &lt; rows.length; i++) tbody.appendChild(rows[i]);}//查找表格的＜th＞元素（假设只有一行），让它们可单击，//以便单击列标题，按该列对行排序function makeSortable(table) {    var headers = table.getElementsByTagName(&quot;th&quot;);    for (var i = 0; i &lt; headers.length; i++) {        (function (n) { //嵌套函数来创建本地作用域            headers[i].onclick = function () {                sortrows(table, n);            };        }(i)); //将i的值赋给局部变量n    }}</code></pre><h4 id="生成目录表"><a href="#生成目录表" class="headerlink" title="生成目录表"></a>生成目录表</h4><pre><code>/** * *这个模块注册一个可在页面加载完成后自动运行的匿名函数。当执行这个函数时会去文档中查找 *id为&quot;TOC&quot;的元素。如果这个元素不存在，就创建一个元素 * *生成的TOC目录应当具有自己的CSS样式。整个目录区域的样式className设置为&quot;TOCEntry&quot; *同样我们为不同层级的目录标题定义不同的样式。＜h1＞标签生成的标题 *className为&quot;TOCLevel1&quot;，＜h2＞标签生成的标题className为&quot;TOCLevel2&quot;，以此类推 *段编号的样式为&quot;TOCSectNum&quot; * *完整的CSS样式代码如下: * *#TOC{border:solid black 1px;margin:10px;padding:10px;} *.TOCEntry{font-family:sans-serif;} *.TOCEntry a{text-decoration:none;} *.TOCLevel1{font-size:16pt;font-weight:bold;} *.TOCLevel2{font-size:12pt;margin-left:.5in;} *.TOCSectNum:after{content:&quot;:&quot;;} * *这段代码的最后一行表示每个段编号之后都有一个冒号和空格符。要想隐藏段编号， *请使用这行代码： *.TOCSectNum{display:none} * **/(function () { //匿名函数定义了一个局部作用域    //查找TOC容器元素    //如果不存在，则在文档开头处创建一个    var toc = document.getElementById(&quot;TOC&quot;);    if (!toc) {        toc = document.createElement(&quot;div&quot;);        toc.id = &quot;TOC&quot;;        document.body.insertBefore(toc, document.body.firstChild);    }    //查找所有的标题元素    var headings;    if (document.querySelectorAll) //我们是否能用这个简单的方法？        headings = document.querySelectorAll(&quot;h1,h2,h3,h4,h5,h6&quot;);    else //否则，查找方法稍微麻烦一些        headings = findHeadings(document.body, []); //递归遍历document的body，查找标题元素    function findHeadings(root, sects) {        for (var c = root.firstChild; c != null; c = c.nextSibling) {            if (c.nodeType !== 1) continue;            if (c.tagName.length == 2 &amp;&amp; c.tagName.charAt(0) == &quot;H&quot;)                sects.push(c);            else                findHeadings(c, sects);        }        return sects;    }    //初始化一个数组来保持跟踪章节号    var sectionNumbers = [0, 0, 0, 0, 0, 0]; //现在，循环已找到的标题元素    for (var h = 0; h &lt; headings.length; h++) {        var heading = headings[h]; //跳过在TOC容器中的标题元素        if (heading.parentNode == toc) continue; //判定标题的级别        var level = parseInt(heading.tagName.charAt(1));        if (isNaN(level) || level &lt; 1 || level &gt; 6) continue; //对于该标题级别增加sectionNumbers对应的数字        //重置所有标题比它级别低的数字为零        sectionNumbers[level - 1]++;        for (var i = level; i &lt; 6; i++) sectionNumbers[i] = 0; //现在，将所有标题级别的章节号组合产生一个章节号， 如2 .3 .1        var sectionNumber = sectionNumbers.slice(0, level).join(&quot;.&quot;) //为标题级别增加章节号        //把数字放在＜span＞中，使得其可以用样式修饰        var span = document.createElement(&quot;span&quot;);        span.className = &quot;TOCSectNum&quot;;        span.innerHTML = sectionNumber;        heading.insertBefore(span, heading.firstChild); //用命名的锚点将标题包起来，以便为它增加链接        var anchor = document.createElement(&quot;a&quot;);        anchor.name = &quot;TOC&quot; + sectionNumber;        heading.parentNode.insertBefore(anchor, heading);        anchor.appendChild(heading); //现在为该节创建一个链接        var link = document.createElement(&quot;a&quot;);        link.href = &quot;#TOC&quot; + sectionNumber; //链接的目标地址        link.innerHTML = heading.innerHTML; //链接文本与实际标题一致        //将链接放在一个div中，div用基于级别名字的样式修饰        var entry = document.createElement(&quot;div&quot;);        entry.className = &quot;TOCEntry TOCLevel&quot; + level;        entry.appendChild(link); //该div添加到TOC容器中        toc.appendChild(entry);    }}());</code></pre><h4 id="从URL解析参数"><a href="#从URL解析参数" class="headerlink" title="从URL解析参数"></a>从URL解析参数</h4><pre><code>/* *这个函数用来解析来自URL的查询串中的name=value参数对 *它将name=value对存储在一个对象的属性中，并返回该对象 *这样来使用它 * *var args=urlArgs();//从URL中解析参数 *var q=args.q||&quot;&quot;;//如果参数定义了的话就使用参数；否则使用一个默认值 *var n=args.n?parseInt(args.n):10; */function urlArgs() {    var args = {}; //定义一个空对象    var query = location.search.substring(1); //查找到查询串，并去掉&#39;?&#39;    var pairs = query.split(&quot;&amp;&quot;); //根据&quot;&amp;&quot;符号将查询字符串分隔开    for (var i = 0; i &lt; pairs.length; i++) { //对于每个片段        var pos = pairs[i].indexOf(&#39;=&#39;); //查找&quot;name=value&quot;        if (pos == -1) continue; //如果没有找到的话，就跳过        var name = pairs[i].substring(0, pos); //提取name        var value = pairs[i].substring(pos + 1); //提取value        value = decodeURIComponent(value); //对value进行解码        args[name] = value; //存储为属性    }    return args; //返回解析后的参数}</code></pre><h4 id="获取纯文本的元素内容"><a href="#获取纯文本的元素内容" class="headerlink" title="获取纯文本的元素内容"></a>获取纯文本的元素内容</h4><pre><code>/** *一个参数，返回元素的textContent或innerText *两个参数，用value参数的值设置元素的textContent或innerText */function textContent(element, value) {    var content = element.textContent; //检测textContent是否有定义    if (value === undefined) { //没传递value，因此返回当前文本        if (content !== undefined) {            return content;        } else {            return element.innerText;        }    } else { //传递了value，因此设置文本        if (content !== undefined) {            element.textContent = value;        } else {            element.innerText = value;        }    }}</code></pre><h4 id="手写一个JSONP实现"><a href="#手写一个JSONP实现" class="headerlink" title="手写一个JSONP实现"></a>手写一个JSONP实现</h4><pre><code>//根据指定的URL发送一个JSONP请求//然后把解析得到的响应数据传递给回调函数//在URL中添加一个名为jsonp的查询参数，用于指定该请求的回调函数的名称function getJSONP(url, callback) { //为本次请求创建一个唯一的回调函数名称    var cbnum = &quot;cb&quot; + getJSONP.counter++; //每次自增计数器    var cbname = &quot;getJSONP.&quot; + cbnum; //作为JSONP函数的属性    //将回调函数名称以表单编码的形式添加到URL的查询部分中    //使用jsonp作为参数名，一些支持JSONP的服务    //可能使用其他的参数名，比如callback    if (url.indexOf(&quot;?&quot;) === -1) //URL没有查询部分        url += &quot;?jsonp=&quot; + cbname; //作为查询部分添加参数    else //否则        url += &quot;＆jsonp=&quot; + cbname; //作为新的参数添加它    //创建script元素用于发送请求    var script = document.createElement(&quot;script&quot;); //定义将被脚本执行的回调函数    getJSONP[cbnum] = function (response) {        try {            callback(response); //处理响应数据        } finally { //即使回调函数或响应抛出错误            delete getJSONP[cbnum]; //删除该函数            script.parentNode.removeChild(script); //移除script元素        }    }; //立即触发HTTP请求    script.src = url; //设置脚本的URL    document.body.appendChild(script); //把它添加到文档中}getJSONP.counter = 0; //用于创建唯一回调函数名称的计数器</code></pre><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><pre><code>//将child节点插入到parent中，使其成为第n个子节点function insertAt(parent, child, n) {    if (n &lt; 0 || n &gt; parent.childNodes.length) {        throw new Error(&quot;invalid index&quot;);    } else if (n == parent.childNodes.length) {        parent.appendChild(child);    } else {        parent.insertBefore(child, parent.childNodes[n]);    }}</code></pre><h4 id="使用innerHTML实现outerHTML属性"><a href="#使用innerHTML实现outerHTML属性" class="headerlink" title="使用innerHTML实现outerHTML属性"></a>使用innerHTML实现outerHTML属性</h4><pre><code>//为那些不支持它的浏览器实现outerHTML属性//假设浏览器确实支持innerHTML，并有个可扩展的Element.prototype，//并且可以定义getter和setter(function () { //如果outerHTML存在，则直接返回    if (document.createElement(&quot;div&quot;).outerHTML) return; //返回this所引用元素的外部HTML    function outerHTMLGetter() {        var container = document.createElement(&quot;div&quot;); //虚拟元素        container.appendChild(this.cloneNode(true)); //复制到该虚拟节点        return container.innerHTML; //返回虚拟节点的innerHTML    }    //用指定的值设置元素的外部HTML    function outerHTMLSetter(value) { //创建一个虚拟元素，设置其内容为指定的值        var container = document.createElement(&quot;div&quot;);        container.innerHTML = value; //将虚拟元素中的节点全部移动到文档中        while (container.firstChild) //循环，直到container没有子节点为止            this.parentNode.insertBefore(container.firstChild, this); //删除所被取代的节点        this.parentNode.removeChild(this);    }    //现在使用这两个函数作为所有Element对象的outerHTML属性的getter和setter    //如果它存在则使用ES5的Object.defineProperty()方法，    //否则，退而求其次，使用__defineGetter__()和__defineSetter__()    if (Object.defineProperty) {        Object.defineProperty(Element.prototype, &quot;outerHTML&quot;, {            get: outerHTMLGetter,            set: outerHTMLSetter,            enumerable: false,            configurable: true        });    } else {        Element.prototype.__defineGetter__(&quot;outerHTML&quot;, outerHTMLGetter);        Element.prototype.__defineSetter__(&quot;outerHTML&quot;, outerHTMLSetter);    }}());</code></pre><h4 id="倒序排列子节点"><a href="#倒序排列子节点" class="headerlink" title="倒序排列子节点"></a>倒序排列子节点</h4><pre><code>//倒序排列节点n的子节点function reverse(n) { //创建一个DocumentFragment作为临时容器    var f = document.createDocumentFragment(); //从后至前循环子节点，将每一个子节点移动到文档片段中    //n的最后一个节点变成f的第一个节点，反之亦然    //注意，给f添加一个节点，该节点自动地会从n中删除    while (n.lastChild) f.appendChild(n.lastChild); //最后，把f的所有子节点一次性全部移回n中    n.appendChild(f);}</code></pre><h4 id="查询窗口滚动条的位置"><a href="#查询窗口滚动条的位置" class="headerlink" title="查询窗口滚动条的位置"></a>查询窗口滚动条的位置</h4><pre><code>//以一个对象的x和y属性的方式返回滚动条的偏移量function getScrollOffsets(w) { //使用指定的窗口，如果不带参数则使用当前窗口    w = w || window; //除了IE 8及更早的版本以外，其他浏览器都能用    if (w.pageXOffset != null) return {        x: w.pageXOffset,        y: w.pageYOffset    }; //对标准模式下的IE（或任何浏览器）    var d = w.document;    if (document.compatMode == &quot;CSS1Compat&quot;)        return {            x: d.documentElement.scrollLeft,            y: d.documentElement.scrollTop        }; //对怪异模式下的浏览器    return {        x: d.body.scrollLeft,        y: d.body.scrollTop    };}</code></pre><h4 id="查询窗口的视口尺寸"><a href="#查询窗口的视口尺寸" class="headerlink" title="查询窗口的视口尺寸"></a>查询窗口的视口尺寸</h4><pre><code>//作为一个对象的w和h属性返回视口的尺寸function getViewportSize(w) { //使用指定的窗口，如果不带参数则使用当前窗口    w = w || window; //除了IE 8及更早的版本以外，其他浏览器都能用    if (w.innerWidth != null) return {        w: w.innerWidth,        h: w.innerHeight    }; //对标准模式下的IE（或任何浏览器）    var d = w.document;    if (document.compatMode == &quot;CSS1Compat&quot;)        return {            w: d.documentElement.clientWidth,            h: d.documentElement.clientHeight        }; //对怪异模式下的浏览器    return {        w: d.body.clientWidth,        h: d.body.clientWidth    };}</code></pre><h4 id="返回函数的名字"><a href="#返回函数的名字" class="headerlink" title="返回函数的名字"></a>返回函数的名字</h4><pre><code>Function.prototype.getName = function () {    return this.name || this.toString().match(/function\s*(\w*)\s*\(/)[1];}</code></pre><h4 id="原生JS实现CSS动画1"><a href="#原生JS实现CSS动画1" class="headerlink" title="原生JS实现CSS动画1"></a>原生JS实现CSS动画1</h4><pre><code>//将e转化为相对定位的元素，使之左右&quot;震动&quot;//第一个参数可以是元素对象或者元素的id//如果第二个参数是函数，以e为参数，它将在动画结束时调用//第三个参数指定e震动的距离，默认是5像素//第四个参数指定震动多久，默认是500毫秒function shake(e, oncomplete, distance, time) { //句柄参数    if (typeof e === &quot;string&quot;) e = document.getElementById(e);    if (!time) time = 500;    if (!distance) distance = 5;    var originalStyle = e.style.cssText; //保存e的原始style    e.style.position = &quot;relative&quot;; //使e相对定位    var start = (new Date()).getTime(); //注意，动画的开始时间    animate(); //动画开始    //函数检查消耗的时间，并更新e的位置    //如果动画完成，它将e还原为原始状态    //否则，它更新e的位置，安排它自身重新运行    function animate() {        var now = (new Date()).getTime(); //得到当前时间        var elapsed = now - start; //从开始以来消耗了多长时间？        var fraction = elapsed / time; //是总时间的几分之几？        if (fraction &lt; 1) { //如果动画未完成            //作为动画完成比例的函数，计算e的x位置            //使用正弦函数将完成比例乘以4pi            //所以，它来回往复两次            var x = distance * Math.sin(fraction * 4 * Math.PI);            e.style.left = x + &quot;px&quot;; //在25毫秒后或在总时间的最后尝试再次运行函数            //目的是为了产生每秒40帧的动画            setTimeout(animate, Math.min(25, time - elapsed));        } else { //否则，动画完成            e.style.cssText = originalStyle //恢复原始样式            if (oncomplete) oncomplete(e); //调用完成后的回调函数        }    }}</code></pre><h4 id="原生JS实现CSS动画2"><a href="#原生JS实现CSS动画2" class="headerlink" title="原生JS实现CSS动画2"></a>原生JS实现CSS动画2</h4><pre><code>function fadeOut(e, oncomplete, time) {    if (typeof e === &quot;string&quot;) e = document.getElementById(e);    if (!time) time = 500; //使用Math.sqrt作为一个简单的“缓动函数”来创建动画    //精巧的非线性：一开始淡出得比较快，然后缓慢了一些    var ease = Math.sqrt;    var start = (new Date()).getTime(); //注意：动画开始的时间    animate(); //动画开始    function animate() {        var elapsed = (new Date()).getTime() - start; //消耗的时间        var fraction = elapsed / time; //总时间的几分之几？        if (fraction &lt; 1) { //如果动画未完成            var opacity = 1 - ease(fraction); //计算元素的不透明度            e.style.opacity = String(opacity); //设置在e上            setTimeout(animate, //调度下一帧                Math.min(25, time - elapsed));        } else { //否则，动画完成            e.style.opacity = &quot;0&quot;; //使e完全透明            if (oncomplete) oncomplete(e); //调用完成后的回调函数        }    }}</code></pre><h4 id="仿HTML5的classList属性"><a href="#仿HTML5的classList属性" class="headerlink" title="仿HTML5的classList属性"></a>仿HTML5的classList属性</h4><pre><code>/* *如果e有classList属性则返回它。否则，返回一个为e模拟DOMTokenList API的对象 *返回的对象有contains()、add()、remove()、toggle()和toString()等方法 *来检测和修改元素e的类集合。如果classList属性是原生支持的， *返回的类数组对象有length和数组索引属性。模拟DOMTokenList不是类数组对象， *但是它有一个toArray()方法来返回一个含元素类名的纯数组快照 */function classList(e) {    if (e.classList) return e.classList; //如果e.classList存在，则返回它    else return new CSSClassList(e); //否则，就伪造一个}//CSSClassList是一个模拟DOMTokenList的JavaScript类function CSSClassList(e) {    this.e = e;} //如果e.className包含类名c则返回true否则返回falseCSSClassList.prototype.contains = function (c) { //检查c是否是合法的类名    if (c.length === 0 || c.indexOf(&quot; &quot;) != -1)        throw new Error(&quot;Invalid class name:&#39;&quot; + c + &quot;&#39;&quot;); //首先是常规检查    var classes = this.e.className;    if (!classes) return false; //e不含类名    if (classes === c) return true; //e有一个完全匹配的类名    //否则，把c自身看做一个单词，利用正则表达式搜索c    //\b在正则表达式里代表单词的边界    return classes.search(&quot;\\b&quot; + c + &quot;\\b&quot;) != -1;}; //如果c不存在，将c添加到e.className中CSSClassList.prototype.add = function (c) {    if (this.contains(c)) return; //如果存在，什么都不做    var classes = this.e.className;    if (classes &amp;&amp; classes[classes.length - 1] != &quot;&quot;)        c = &quot;&quot; + c; //如果需要加一个空格    this.e.className += c; //将c添加到className中}; //将在e.className中出现的所有c都删除CSSClassList.prototype.remove = function (c) { //检查c是否是合法的类名    if (c.length === 0 || c.indexOf(&quot; &quot;) != -1)        throw new Error(&quot;Invalid class name:&#39;&quot; + c + &quot;&#39;&quot;); //将所有作为单词的c和多余的尾随空格全部删除    var pattern = new RegExp(&quot;\\b&quot; + c + &quot;\\b\\s*&quot;, &quot;g&quot;);    this.e.className = this.e.className.replace(pattern, &quot;&quot;);}; //如果c不存在，将c添加到e.className中，并返回true//否则，将在e.className中出现的所有c都删除，并返回falseCSSClassList.prototype.toggle = function (c) {    if (this.contains(c)) { //如果e.className包含c        this.remove(c); //删除它        return false;    } else { //否则        this.add(c); //添加它        return true;    }}; //返回e.className本身CSSClassList.prototype.toString = function () {    return this.e.className;}; //返回在e.className中的类名CSSClassList.prototype.toArray = function () {    return this.e.className.match(/\b\w+\b/g) || [];};</code></pre><h4 id="查询纯文本形式的内容"><a href="#查询纯文本形式的内容" class="headerlink" title="查询纯文本形式的内容"></a>查询纯文本形式的内容</h4><pre><code>/** *一个参数，返回元素的textContent或innerText *两个参数，用value参数的值设置元素的textContent或innerText */function textContent(element, value) {    var content = element.textContent; //检测textContent是否有定义    if (value === undefined) { //没传递value，因此返回当前文本        if (content !== undefined) return content;        else return element.innerText;    } else { //传递了value，因此设置文本        if (content !== undefined) element.textContent = value;        else element.innerText = value;    }}</code></pre><h4 id="查找元素的后代中节点中的所有Text节点"><a href="#查找元素的后代中节点中的所有Text节点" class="headerlink" title="查找元素的后代中节点中的所有Text节点"></a>查找元素的后代中节点中的所有Text节点</h4><pre><code>//返回元素e的纯文本内容，递归进入其子元素//该方法的效果类似于textContent属性function textContent(e) {    var child, type, s = &quot;&quot;; //s保存所有子节点的文本    for (child = e.firstChild; child != null; child = child.nextSibling) {        type = child.nodeType;        if (type === 3 || type === 4) //Text和CDATASection节点            s += child.nodeValue;        else if (type === 1) //递归Element节点            s += textContent(child);    }    return s;}</code></pre><h4 id="使用innerHTML实现insertAdjacentHTML"><a href="#使用innerHTML实现insertAdjacentHTML" class="headerlink" title="使用innerHTML实现insertAdjacentHTML()"></a>使用innerHTML实现insertAdjacentHTML()</h4><pre><code>//本模块为不支持它的浏览器定义了Element.insertAdjacentHTML//还定义了一些可移植的HTML插入函数，它们的名字比insertAdjacentHTML更符合逻辑：//Insert.before()、Insert.after()、Insert.atStart()和Insert.atEnd()var Insert = (function () { //如果元素有原生的insertAdjacentHTML，    //在4个函数名更明了的HTML插入函数中使用它    if (document.createElement(&quot;div&quot;).insertAdjacentHTML) {        return {            before: function (e, h) {                e.insertAdjacentHTML(&quot;beforebegin&quot;, h);            },            after: function (e, h) {                e.insertAdjacentHTML(&quot;afterend&quot;, h);            },            atStart: function (e, h) {                e.insertAdjacentHTML(&quot;afterbegin&quot;, h);            },            atEnd: function (e, h) {                e.insertAdjacentHTML(&quot;beforeend&quot;, h);            }        };    }    //否则，无原生的insertAdjacentHTML    //实现同样的4个插入函数，并使用它们来定义insertAdjacentHTML    //首先，定义一个工具函数，传入HTML字符串，返回一个DocumentFragment，    //它包含了解析后的HTML的表示    function fragment(html) {        var elt = document.createElement(&quot;div&quot;); //创建空元素        var frag = document.createDocumentFragment(); //创建空文档片段        elt.innerHTML = html; //设置元素内容        while (elt.firstChild) //移动所有的节点            frag.appendChild(elt.firstChild); //从elt到frag        return frag; //然后返回frag    }    var Insert = {        before: function (elt, html) {            elt.parentNode.insertBefore(fragment(html), elt);        },        after: function (elt, html) {            elt.parentNode.insertBefore(fragment(html), elt.nextSibling);        },        atStart: function (elt, html) {            elt.insertBefore(fragment(html), elt.firstChild);        },        atEnd: function (elt, html) {            elt.appendChild(fragment(html));        }    }; //基于以上函数实现insertAdjacentHTML    Element.prototype.insertAdjacentHTML = function (pos, html) {        switch (pos.toLowerCase()) {            case &quot;beforebegin&quot;:                return Insert.before(this, html);            case &quot;afterend&quot;:                return Insert.after(this, html);            case &quot;afterbegin&quot;:                return Insert.atStart(this, html);            case &quot;beforeend&quot;:                return Insert.atEnd(this, html);        }    };    return Insert; //最后返回4个插入函数}());</code></pre><h4 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h4><pre><code>/** *Drag.js：拖动绝对定位的HTML元素 * *这个模块定义了一个drag()函数，它用于mousedown事件处理程序的调用 *随后的mousemove事件将移动指定元素，mouseup事件将终止拖动 *这些实现能同标准和IE两种事件模型一起工作 * *参数： * *elementToDrag：接收mousedown事件的元素或某些包含元素 *它必须是定位的元素,元素的样式必须是行内样式 *它的style.left和style.top值将随着用户的拖动而改变 * *event：mousedown事件对象 **/function drag(elementToDrag, event) { //初始鼠标位置，转换为文档坐标    var startX = event.clientX;    var startY = event.clientY; //在文档坐标下，待拖动元素的初始位置    //因为elementToDrag是绝对定位的，    //所以我们可以假设它的offsetParent就是文档的body元素    var origX = parseFloat(elementToDrag.style.left);    var origY = parseFloat(elementToDrag.style.top); //计算mousedown事件和元素左上角之间的距离    //我们将它另存为鼠标移动的距离    if (document.addEventListener) { //标准事件模型        //在document对象上注册捕获事件处理程序        document.addEventListener(&quot;mousemove&quot;, moveHandler, true);        document.addEventListener(&quot;mouseup&quot;, upHandler, true);    } else if (document.attachEvent) { //用于IE5～8的IE事件模型        //在IE事件模型中，        //捕获事件是通过调用元素上的setCapture()捕获它们        elementToDrag.setCapture();        elementToDrag.attachEvent(&quot;onmousemove&quot;, moveHandler);        elementToDrag.attachEvent(&quot;onmouseup&quot;, upHandler); //作为mouseup事件看待鼠标捕获的丢失        elementToDrag.attachEvent(&quot;onlosecapture&quot;, upHandler);    }    //我们处理了这个事件，不让任何其他元素看到它    if (event.stopPropagation) event.stopPropagation(); //标准模型    else event.cancelBubble = true; //IE    //现在阻止任何默认操作    if (event.preventDefault) event.preventDefault(); //标准模型    else event.returnValue = false; //IE    /**     * 当元素正在被拖动时， 这就是捕获mousemove事件的处理程序     *它用于移动这个元素     **/    function moveHandler(e) {        if (!e) e = window.event; //IE事件模型        //移动这个元素到当前鼠标位置，        //通过滚动条的位置和初始单击的偏移量来调整        var targetLeft = e.clientX - startX + origX;        var targetTop = e.clientY - startY + origY;        var minLeft = 0;        var minTop = 0;        var maxLeft = (document.documentElement.clientWidth || document.body.clientWidth) - elementToDrag.offsetWidth;        var maxTop = (document.documentElement.clientHeight || document.body.clientHeight) - elementToDrag.offsetHeight;        targetLeft = targetLeft &gt; maxLeft ? maxLeft : (targetLeft &lt; minLeft ? minLeft : targetLeft);        targetTop = targetTop &gt; maxTop ? maxTop : (targetTop &lt; minTop ? minTop : targetTop);        elementToDrag.style.left = targetLeft + &quot;px&quot;;        elementToDrag.style.top = targetTop + &quot;px&quot;;        if (e.stopPropagation) e.stopPropagation(); //标准        else e.cancelBubble = true; //IE    }    /**     *这是捕获在拖动结束时发生的最终mouseup事件的处理程序     **/    function upHandler(e) {        if (!e) e = window.event; //IE事件模型        //注销捕获事件处理程序        if (document.removeEventListener) { //DOM事件模型            document.removeEventListener(&quot;mouseup&quot;, upHandler, true);            document.removeEventListener(&quot;mousemove&quot;, moveHandler, true);        } else if (document.detachEvent) { //IE 5+事件模型            elementToDrag.detachEvent(&quot;onlosecapture&quot;, upHandler);            elementToDrag.detachEvent(&quot;onmouseup&quot;, upHandler);            elementToDrag.detachEvent(&quot;onmousemove&quot;, moveHandler);            elementToDrag.releaseCapture();        }        //并且不让事件进一步传播        if (e.stopPropagation) e.stopPropagation(); //标准模型        else e.cancelBubble = true; //IE    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JavaScript常用方法&quot;&gt;&lt;a href=&quot;#JavaScript常用方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript常用方法&quot;&gt;&lt;/a&gt;JavaScript常用方法&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="vernonn.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="vernonn.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS开发技巧(待补充)</title>
    <link href="vernonn.com/2017/11/19/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    <id>vernonn.com/2017/11/19/CSS开发技巧/</id>
    <published>2017-11-19T15:37:14.000Z</published>
    <updated>2018-05-06T03:46:46.883Z</updated>
    
    <content type="html"><![CDATA[<p>更多参见：<a href="http://www.haorooms.com/tag/css" target="_blank" rel="noopener">http://www.haorooms.com/tag/css</a></p><hr><h4 id="1、多列等高布局实现方式"><a href="#1、多列等高布局实现方式" class="headerlink" title="1、多列等高布局实现方式"></a>1、多列等高布局实现方式</h4><p>何为多列等高布局？如下图这样<br><img src="http://www.haorooms.com/uploads/images/tips.gif" alt="image"><br>点击增加一侧文字，另一侧背景也增加。</p><a id="more"></a><p>html代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>haorooms多列等高布局左<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rights<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>多列等高布局,使用正负 margin 与 padding 相冲的方式实现。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h6 id="方法一：-使用正负-margin-与-padding-相冲的方式实现"><a href="#方法一：-使用正负-margin-与-padding-相冲的方式实现" class="headerlink" title="方法一： 使用正负 margin 与 padding 相冲的方式实现"></a>方法一： 使用正负 margin 与 padding 相冲的方式实现</h6><pre><code>    #container{    width:400px;    margin:0 auto;    background:#eee;    overflow:hidden;}.left,.right{    width:200px;    float:left;    font-size: 16px;    line-height:24px;    color:#333;    padding-bottom:5000px;    margin-bottom:-5000px;}.left{    background-color: deeppink;}.right{    background-color:yellowgreen;}</code></pre><p>给一个足够大的padding和负margin</p><h6 id="二、使用-display-flex-的方式实现"><a href="#二、使用-display-flex-的方式实现" class="headerlink" title="二、使用 display:flex 的方式实现"></a>二、使用 display:flex 的方式实现</h6><p>这个方式很简单，移动端我们经常用，container 设置为display:flex，子元素设置为flex：1就可以了。</p><h6 id="三、display-table-cell-实现"><a href="#三、display-table-cell-实现" class="headerlink" title="三、display:table-cell 实现"></a>三、display:table-cell 实现</h6><p>和上面方法类似，container 设置为display:table;，子元素设置为display:table-cell;就可以了。</p><h6 id="四、-父容器设置背景色实现"><a href="#四、-父容器设置背景色实现" class="headerlink" title="四、 父容器设置背景色实现"></a>四、 父容器设置背景色实现</h6><p>如下：</p><pre><code>#container{    width:400px;    margin:0 auto;    background-color: deeppink;    overflow:hidden;}.left,.right{    width:200px;    float:left;    font-size: 16px;    line-height:24px;    color:#333;}.right{    background-color:yellowgreen;}</code></pre><h6 id="五、父容器多重背景色–线性渐变"><a href="#五、父容器多重背景色–线性渐变" class="headerlink" title="五、父容器多重背景色–线性渐变"></a>五、父容器多重背景色–线性渐变</h6><pre><code>#container{    width:400px;    margin:0 auto;    background-image:        linear-gradient(90deg, yellowgreen 50%, deeppink 0);    overflow:hidden;}.left,.right{    width:200px;    float:left;    font-size: 16px;    line-height:24px;    color:#333;}</code></pre><h6 id="六、border实现"><a href="#六、border实现" class="headerlink" title="六、border实现"></a>六、border实现</h6><pre><code>    #container{     border-left:200px solid yellowgreen;     background-color:deeppink;     width:200px;     font-size: 16px;     line-height:24px;     color:#333;    }    .left{        width:200px;        margin-left:-200px;        float:left;    }</code></pre><h4 id="2、多列均匀布局"><a href="#2、多列均匀布局" class="headerlink" title="2、多列均匀布局"></a>2、多列均匀布局</h4><p>如下图这样均匀布局<br><img src="http://www.haorooms.com/uploads/images/bujus.png" alt="image"></p><h6 id="方法一：display-flex"><a href="#方法一：display-flex" class="headerlink" title="方法一：display:flex"></a>方法一：display:flex</h6><p>这种方法上面也讲过，实现起来比较简单，适合移动端布局。</p><h6 id="方法二：借助伪元素及-text-align-justify"><a href="#方法二：借助伪元素及-text-align-justify" class="headerlink" title="方法二：借助伪元素及 text-align:justify"></a>方法二：借助伪元素及 text-align:justify</h6><p>html代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>justify<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>css代码如下：</p><pre><code>.justify{  text-align: justify;  text-align-last: justify; // 新增这一行}.justify i{  width:24px;  line-height:24px;  display:inline-block;  text-align:center;}</code></pre><p>text-align-last兼容性不是很好，可以使用::after，</p><pre><code>.justify{  text-align: justify;}.justify i{  width:24px;  line-height:24px;  display:inline-block;  text-align:center;  border-radius:50%;}.justify:after {  content: &quot;&quot;;  display: inline-block;  position: relative;  width: 100%;}</code></pre><h4 id="3、列表布局边界线问题"><a href="#3、列表布局边界线问题" class="headerlink" title="3、列表布局边界线问题"></a>3、列表布局边界线问题</h4><p>如下图：<br><img src="http://www.haorooms.com/uploads/images/bianjie.png" alt="image"></p><h6 id="方法一：margin负边距"><a href="#方法一：margin负边距" class="headerlink" title="方法一：margin负边距"></a>方法一：margin负边距</h6><p>思路：</p><p>外层设置width，overflow设置为hidden,内层设置负边距，margin-left:-1px;就可以把左侧边距隐藏</p><p>html代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>haorooms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>hao测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>边界线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>css代码：</p><pre><code>ul{    width: 300px;    margin-left:-1px;}li{    float:left;    width:99px;    line-height:30px;    text-align:center;    border-left:1px solid #999;    font-size:18px;    margin-bottom:10px;}.ul-container{    width: 300px;    margin: 50px auto;    overflow:hidden;    background: #eee;    padding:10px 0;}</code></pre><h6 id="方法二-：使用伪类选择器"><a href="#方法二-：使用伪类选择器" class="headerlink" title="方法二 ：使用伪类选择器"></a>方法二 ：使用伪类选择器</h6><pre><code>// 使用伪类选择器，选择第 3n 个元素去掉边框li:nth-child(3n){  border-right:none;}</code></pre><h4 id="4、任意元素垂直居中"><a href="#4、任意元素垂直居中" class="headerlink" title="4、任意元素垂直居中"></a>4、任意元素垂直居中</h4><p>关于css垂直居中，<a href="http://www.haorooms.com/post/div_guding_inner_center" target="_blank" rel="noopener">css固定宽高DIV内部元素垂直居中的方法</a> 和 <a href="http://www.haorooms.com/post/css_div_juzhong" target="_blank" rel="noopener">css的div垂直居中的方法</a> 。现在在body中，初始化定义一下，就可以让任意元素垂直居中，代码如下：</p><pre><code>html, body {  height: 100%;  margin: 0;}body {  -webkit-align-items: center;    -ms-flex-align: center;    align-items: center;  display: -webkit-flex;  display: flex;}</code></pre><p>当然，这个有一定的兼容问题！不过现代浏览器是没有问题的！</p><h4 id="5、vertical-align-属性"><a href="#5、vertical-align-属性" class="headerlink" title="5、vertical-align 属性"></a>5、vertical-align 属性</h4><p>vertical-align 只在行内元素，或者inline、inline-block等中才起作用。当我们在某个div中使用垂直居中是不管用的，可参考：<a href="http://www.haorooms.com/post/div_guding_inner_center" target="_blank" rel="noopener">http://www.haorooms.com/post/div_guding_inner_center</a></p><p>除此之外，vertical-align 还支持数值和百分比！</p><p>可以如下写：</p><pre><code>.aSample{vertical-align:-2px;}.aSample{vertical-align:-10%;}</code></pre><p>这个负值和 margin-bottom类似，但是呢，vertical-align可以将父级元素撑大！</p><h4 id="6、父元素font-size-0的作用"><a href="#6、父元素font-size-0的作用" class="headerlink" title="6、父元素font-size:0的作用"></a>6、父元素font-size:0的作用</h4><p>display：inline-block的元素之间会有一个字符的间隙，这个间隙导致了最后一个会掉下来。解决方案一般有如下几种：</p><p>1、给父元素设置font-size：0px；</p><p>2、取消掉换行符，如这样：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>aaaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>aaaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>aaaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>连续。</p><p>或者如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>space<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>惆怅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>淡定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热血<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>space<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>惆怅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>淡定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>##<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热血<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>但是这种方式不推荐</p><p>3、使用margin负值。</p><p>4、使用浮动。</p><p>5、另外还有使用letter-spacing、word-spacing等方法。</p><p>当然最好的解决方案就是设置font-size:0</p><h6 id="父元素-font-size-0-例子："><a href="#父元素-font-size-0-例子：" class="headerlink" title="父元素 font-size:0 例子："></a>父元素 font-size:0 例子：</h6><p>html:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>css:</p><pre><code>.box{  width: 90px;  height: 60px;  border: 1px solid #ccc;}.box div{  display: inline-block;  box-sizing: border-box;  font-size: 14px;  width: 30px;  border: 1px solid ;}</code></pre><p>理论上box下面的三个div都是30px，刚好在一行显示，但是实际效果是这样：</p><p><img src="http://sandbox.runjs.cn/uploads/rs/216/0y89gzo2/1098079-20170209145.png" alt="image"></p><p>这就是上文说到的原因，我们在box下添加font-size:0;再看看效果</p><p><img src="http://sandbox.runjs.cn/uploads/rs/216/0y89gzo2/111098079-201702091.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更多参见：&lt;a href=&quot;http://www.haorooms.com/tag/css&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.haorooms.com/tag/css&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1、多列等高布局实现方式&quot;&gt;&lt;a href=&quot;#1、多列等高布局实现方式&quot; class=&quot;headerlink&quot; title=&quot;1、多列等高布局实现方式&quot;&gt;&lt;/a&gt;1、多列等高布局实现方式&lt;/h4&gt;&lt;p&gt;何为多列等高布局？如下图这样&lt;br&gt;&lt;img src=&quot;http://www.haorooms.com/uploads/images/tips.gif&quot; alt=&quot;image&quot;&gt;&lt;br&gt;点击增加一侧文字，另一侧背景也增加。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="vernonn.com/categories/CSS/"/>
    
    
      <category term="技巧" scheme="vernonn.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>CSS七种三栏布局技巧</title>
    <link href="vernonn.com/2017/11/19/CSS%E4%B8%83%E7%A7%8D%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/"/>
    <id>vernonn.com/2017/11/19/CSS七种三栏布局技巧/</id>
    <published>2017-11-19T15:00:16.000Z</published>
    <updated>2018-05-06T03:54:56.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS-七种三栏布局技巧"><a href="#CSS-七种三栏布局技巧" class="headerlink" title="CSS 七种三栏布局技巧"></a>CSS 七种三栏布局技巧</h3><a id="more"></a><p>三栏布局，顾名思义就是两边固定，中间自适应。三栏布局在开发十分常见，那么什么是三栏布局？比如我打开某东的首页：<br><img src="https://img.funteas.com/bac807a8c0f10cd4a5eef440123dab99?imageView2/2/w/800" alt="image"><br>映入眼帘的就是一个常见的三栏布局：即左边商品导航和右边导航固定宽度，中间的主要内容随浏览器宽度自适应。</p><p>下面围绕的这样的目的，即左右模块固定宽度，中间模块随浏览器变化自适应，想要完成的最终效果如下图所示：<br><img src="https://img.funteas.com/8c0caa243fe962aaf371e9ca018366eb?imageView2/2/w/800" alt="image"></p><p>红色和蓝色宽度固定，绿色宽度自适应，下面七种方法实现的最终效果跟这个差不多，可能会稍有不同。</p><p>下面七种技巧各有千秋，在开发中可以根据实际需求选择适合自己的方法进行编码。</p><h5 id="1-流体布局"><a href="#1-流体布局" class="headerlink" title="1. 流体布局"></a>1. 流体布局</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>左右模块各自向左右浮动，并设置中间模块的 margin 值使中间模块宽度自适应。</p><p>缺点就是主要内容无法最先加载，当页面内容较多时会影响用户体验。</p><h5 id="2-BFC-三栏布局"><a href="#2-BFC-三栏布局" class="headerlink" title="2. BFC 三栏布局"></a>2. BFC 三栏布局</h5><p>BFC 规则有这样的描述：BFC 区域，不会与浮动元素重叠。因此我们可以利用这一点来实现 3 列布局。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>缺点跟方法一类似，主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，有了下面要介绍的布局方案双飞翼布局。</p><h5 id="3-双飞翼布局"><a href="#3-双飞翼布局" class="headerlink" title="3. 双飞翼布局"></a>3. 双飞翼布局</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>          <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>          <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">110</span>px<span class="token punctuation">;</span>          <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">//用于清除浮动        <span class="token class">.main</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>          <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>          <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>          <span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>利用的是浮动元素 margin 负值的应用，感兴趣的同学可以上网搜搜原理。</p><p>主体内容可以优先加载，HTML 代码结构稍微复杂点。</p><h5 id="4-圣杯布局"><a href="#4-圣杯布局" class="headerlink" title="4. 圣杯布局"></a>4. 圣杯布局</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">120</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">220</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>跟双飞翼布局很像，有一些细节上的区别，相对于双飞翼布局来说，HTML 结构相对简单，但是样式定义就稍微复杂，也是优先加载内容主体。</p><h5 id="5-Flex-布局"><a href="#5-Flex-布局" class="headerlink" title="5. Flex 布局"></a>5. Flex 布局</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>            <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">order</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>简单实用，未来的趋势，需要考虑浏览器的兼容性。</p><h5 id="6-Table-布局"><a href="#6-Table-布局" class="headerlink" title="6. Table 布局"></a>6. Table 布局</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.left</span>, <span class="token class">.main</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>缺点：无法设置栏间距</p><h5 id="7-绝对定位布局"><a href="#7-绝对定位布局" class="headerlink" title="7. 绝对定位布局"></a>7. 绝对定位布局</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">120</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>简单实用，并且主要内容可以优先加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS-七种三栏布局技巧&quot;&gt;&lt;a href=&quot;#CSS-七种三栏布局技巧&quot; class=&quot;headerlink&quot; title=&quot;CSS 七种三栏布局技巧&quot;&gt;&lt;/a&gt;CSS 七种三栏布局技巧&lt;/h3&gt;
    
    </summary>
    
      <category term="CSS" scheme="vernonn.com/categories/CSS/"/>
    
    
      <category term="布局" scheme="vernonn.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="vernonn.com/2017/11/07/hello-world/"/>
    <id>vernonn.com/2017/11/07/hello-world/</id>
    <published>2017-11-07T13:14:18.000Z</published>
    <updated>2018-05-06T03:46:12.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客文章"><a href="#我的第一篇博客文章" class="headerlink" title="我的第一篇博客文章"></a>我的第一篇博客文章</h1><a id="more"></a><h1 id="THIS"><a href="#THIS" class="headerlink" title="THIS"></a>THIS</h1><h1 id="IS"><a href="#IS" class="headerlink" title="IS"></a>IS</h1><h1 id="MY"><a href="#MY" class="headerlink" title="MY"></a>MY</h1><h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><h1 id="BLOG-PAGE"><a href="#BLOG-PAGE" class="headerlink" title="BLOG PAGE"></a>BLOG PAGE</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我的第一篇博客文章&quot;&gt;&lt;a href=&quot;#我的第一篇博客文章&quot; class=&quot;headerlink&quot; title=&quot;我的第一篇博客文章&quot;&gt;&lt;/a&gt;我的第一篇博客文章&lt;/h1&gt;
    
    </summary>
    
      <category term="日记" scheme="vernonn.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
